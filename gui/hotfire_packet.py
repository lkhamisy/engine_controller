import time
import struct

class ECParse:

	def __init__(self):
		self.csv_header = "Time (s),valve_states (),pressure[0] (psi),pressure[1] (psi),pressure[2] (psi),pressure[3] (psi),pressure[4] (psi),pressure[5] (psi),pressure[6] (psi),pressure[7] (psi),samplerate (Hz),motor_setpoint[0] (degrees),motor_setpoint[1] (degrees),main_cycle_time (microseconds),motor_cycle_time (microseconds),adc_cycle_time (microseconds),telemetry_cycle_time (microseconds),ebatt (Volts),ibus (Amps),telemetry_rate (Hz),motor_control_gain[0] (),motor_control_gain[1] (),motor_control_gain[2] (),motor_position[0] (),motor_position[1] (),motor_pwm[0] (),motor_pwm[1] (),STATE (),ivlv[0] (Amps),ivlv[1] (Amps),ivlv[2] (Amps),ivlv[3] (Amps),ivlv[4] (Amps),ivlv[5] (Amps),ivlv[6] (Amps),ivlv[7] (Amps),evlv[0] (Volts),evlv[1] (Volts),evlv[2] (Volts),evlv[3] (Volts),evlv[4] (Volts),evlv[5] (Volts),evlv[6] (Volts),evlv[7] (Volts),LOG_TO_AUTO (),auto_states (),e3v (),e5v (),BOARD_ID (),last_packet_number (),last_command_id (),imtr[0] (Amps),imtr[1] (Amps),tbrd (),tvlv (),tmtr (),error_code (),\n"
		self.valve_states = 0
		self.pressure = [0]*16
		self.samplerate = 0
		self.motor_setpoint = [0]*4
		self.main_cycle_time = 0
		self.motor_cycle_time = 0
		self.adc_cycle_time = 0
		self.telemetry_cycle_time = 0
		self.ebatt = 0
		self.ibus = 0
		self.telemetry_rate = 0
		self.motor_control_gain = [0]*4
		self.motor_position = [0]*4
		self.motor_pwm = [0]*4
		self.count1 = 0
		self.count2 = 0
		self.count3 = 0
		self.STATE = 0
		self.load = [0]*4
		self.thrust_load = 0
		self.thermocouple = [0]*4
		self.ivlv = [0]*16
		self.evlv = [0]*16
		self.LOG_TO_AUTO = 0
		self.auto_states = 0
		self.debug = [0]*8
		self.e5v = 0
		self.e3v = 0
		self.BOARD_ID = 0
		self.last_packet_number = -1
		self.last_command_id = -1
		self.imtr = [0]*2
		self.tbrd = 0
		self.tvlv = 0
		self.tmtr = 0
		self.error_code = 0
		self.log_string = ""
		self.num_items = 57
		
		self.dict = {}
		
		self.items = [''] * self.num_items
		self.items[0] = 'valve_states' 
		self.items[1] = 'pressure[0]' 
		self.items[2] = 'pressure[1]' 
		self.items[3] = 'pressure[2]' 
		self.items[4] = 'pressure[3]' 
		self.items[5] = 'pressure[4]' 
		self.items[6] = 'pressure[5]' 
		self.items[7] = 'pressure[6]' 
		self.items[8] = 'pressure[7]' 
		self.items[9] = 'samplerate' 
		self.items[10] = 'motor_setpoint[0]' 
		self.items[11] = 'motor_setpoint[1]' 
		self.items[12] = 'main_cycle_time' 
		self.items[13] = 'motor_cycle_time' 
		self.items[14] = 'adc_cycle_time' 
		self.items[15] = 'telemetry_cycle_time' 
		self.items[16] = 'ebatt' 
		self.items[17] = 'ibus' 
		self.items[18] = 'telemetry_rate' 
		self.items[19] = 'motor_control_gain[0]' 
		self.items[20] = 'motor_control_gain[1]' 
		self.items[21] = 'motor_control_gain[2]' 
		self.items[22] = 'motor_position[0]' 
		self.items[23] = 'motor_position[1]' 
		self.items[24] = 'motor_pwm[0]' 
		self.items[25] = 'motor_pwm[1]' 
		self.items[26] = 'STATE' 
		self.items[27] = 'ivlv[0]' 
		self.items[28] = 'ivlv[1]' 
		self.items[29] = 'ivlv[2]' 
		self.items[30] = 'ivlv[3]' 
		self.items[31] = 'ivlv[4]' 
		self.items[32] = 'ivlv[5]' 
		self.items[33] = 'ivlv[6]' 
		self.items[34] = 'ivlv[7]' 
		self.items[35] = 'evlv[0]' 
		self.items[36] = 'evlv[1]' 
		self.items[37] = 'evlv[2]' 
		self.items[38] = 'evlv[3]' 
		self.items[39] = 'evlv[4]' 
		self.items[40] = 'evlv[5]' 
		self.items[41] = 'evlv[6]' 
		self.items[42] = 'evlv[7]' 
		self.items[43] = 'LOG_TO_AUTO' 
		self.items[44] = 'auto_states' 
		self.items[45] = 'e3v' 
		self.items[46] = 'e5v' 
		self.items[47] = 'BOARD_ID' 
		self.items[48] = 'last_packet_number' 
		self.items[49] = 'last_command_id' 
		self.items[50] = 'imtr[0]' 
		self.items[51] = 'imtr[1]' 
		self.items[52] = 'tbrd' 
		self.items[53] = 'tvlv' 
		self.items[54] = 'tmtr' 
		self.items[55] = 'error_code' 

	def parse_packet(self, packet):
		byte_rep = packet[0:2]
		self.valve_states = int((float(struct.unpack("<H", byte_rep)[0]))/1)
		self.dict[self.items[0]] = self.valve_states
		byte_rep = packet[2:4]
		self.pressure[0] = float((float(struct.unpack("<h", byte_rep)[0]))/1)
		self.dict[self.items[1]] = self.pressure[0]
		byte_rep = packet[4:6]
		self.pressure[1] = float((float(struct.unpack("<h", byte_rep)[0]))/1)
		self.dict[self.items[2]] = self.pressure[1]
		byte_rep = packet[6:8]
		self.pressure[2] = float((float(struct.unpack("<h", byte_rep)[0]))/1)
		self.dict[self.items[3]] = self.pressure[2]
		byte_rep = packet[8:10]
		self.pressure[3] = float((float(struct.unpack("<h", byte_rep)[0]))/1)
		self.dict[self.items[4]] = self.pressure[3]
		byte_rep = packet[10:12]
		self.pressure[4] = float((float(struct.unpack("<h", byte_rep)[0]))/1)
		self.dict[self.items[5]] = self.pressure[4]
		byte_rep = packet[12:14]
		self.pressure[5] = float((float(struct.unpack("<h", byte_rep)[0]))/1)
		self.dict[self.items[6]] = self.pressure[5]
		byte_rep = packet[14:16]
		self.pressure[6] = float((float(struct.unpack("<h", byte_rep)[0]))/1)
		self.dict[self.items[7]] = self.pressure[6]
		byte_rep = packet[16:18]
		self.pressure[7] = float((float(struct.unpack("<h", byte_rep)[0]))/1)
		self.dict[self.items[8]] = self.pressure[7]
		byte_rep = packet[18:22]
		self.samplerate = int((float(struct.unpack("<I", byte_rep)[0]))/1)
		self.dict[self.items[9]] = self.samplerate
		byte_rep = packet[22:26]
		self.motor_setpoint[0] = float((float(struct.unpack("<i", byte_rep)[0]))/1000)
		self.dict[self.items[10]] = self.motor_setpoint[0]
		byte_rep = packet[26:30]
		self.motor_setpoint[1] = float((float(struct.unpack("<i", byte_rep)[0]))/1000)
		self.dict[self.items[11]] = self.motor_setpoint[1]
		byte_rep = packet[30:32]
		self.main_cycle_time = int((float(struct.unpack("<H", byte_rep)[0]))/1)
		self.dict[self.items[12]] = self.main_cycle_time
		byte_rep = packet[32:34]
		self.motor_cycle_time = int((float(struct.unpack("<H", byte_rep)[0]))/1)
		self.dict[self.items[13]] = self.motor_cycle_time
		byte_rep = packet[34:36]
		self.adc_cycle_time = int((float(struct.unpack("<H", byte_rep)[0]))/1)
		self.dict[self.items[14]] = self.adc_cycle_time
		byte_rep = packet[36:40]
		self.telemetry_cycle_time = int((float(struct.unpack("<I", byte_rep)[0]))/1)
		self.dict[self.items[15]] = self.telemetry_cycle_time
		byte_rep = packet[40:42]
		self.ebatt = float((float(struct.unpack("<h", byte_rep)[0]))/1000)
		self.dict[self.items[16]] = self.ebatt
		byte_rep = packet[42:44]
		self.ibus = float((float(struct.unpack("<h", byte_rep)[0]))/100)
		self.dict[self.items[17]] = self.ibus
		byte_rep = packet[44:46]
		self.telemetry_rate = int((float(struct.unpack("<H", byte_rep)[0]))/1)
		self.dict[self.items[18]] = self.telemetry_rate
		byte_rep = packet[46:48]
		self.motor_control_gain[0] = float((float(struct.unpack("<H", byte_rep)[0]))/1)
		self.dict[self.items[19]] = self.motor_control_gain[0]
		byte_rep = packet[48:50]
		self.motor_control_gain[1] = float((float(struct.unpack("<H", byte_rep)[0]))/1)
		self.dict[self.items[20]] = self.motor_control_gain[1]
		byte_rep = packet[50:52]
		self.motor_control_gain[2] = float((float(struct.unpack("<H", byte_rep)[0]))/1)
		self.dict[self.items[21]] = self.motor_control_gain[2]
		byte_rep = packet[52:56]
		self.motor_position[0] = float((float(struct.unpack("<i", byte_rep)[0]))/1000)
		self.dict[self.items[22]] = self.motor_position[0]
		byte_rep = packet[56:60]
		self.motor_position[1] = float((float(struct.unpack("<i", byte_rep)[0]))/1000)
		self.dict[self.items[23]] = self.motor_position[1]
		byte_rep = packet[60:62]
		self.motor_pwm[0] = int((float(struct.unpack("<h", byte_rep)[0]))/1)
		self.dict[self.items[24]] = self.motor_pwm[0]
		byte_rep = packet[62:64]
		self.motor_pwm[1] = int((float(struct.unpack("<h", byte_rep)[0]))/1)
		self.dict[self.items[25]] = self.motor_pwm[1]
		byte_rep = packet[64:65]
		self.STATE = int((float(struct.unpack("<B", byte_rep)[0]))/1)
		self.dict[self.items[26]] = self.STATE
		byte_rep = packet[65:67]
		self.ivlv[0] = float((float(struct.unpack("<h", byte_rep)[0]))/100)
		self.dict[self.items[27]] = self.ivlv[0]
		byte_rep = packet[67:69]
		self.ivlv[1] = float((float(struct.unpack("<h", byte_rep)[0]))/100)
		self.dict[self.items[28]] = self.ivlv[1]
		byte_rep = packet[69:71]
		self.ivlv[2] = float((float(struct.unpack("<h", byte_rep)[0]))/100)
		self.dict[self.items[29]] = self.ivlv[2]
		byte_rep = packet[71:73]
		self.ivlv[3] = float((float(struct.unpack("<h", byte_rep)[0]))/100)
		self.dict[self.items[30]] = self.ivlv[3]
		byte_rep = packet[73:75]
		self.ivlv[4] = float((float(struct.unpack("<h", byte_rep)[0]))/100)
		self.dict[self.items[31]] = self.ivlv[4]
		byte_rep = packet[75:77]
		self.ivlv[5] = float((float(struct.unpack("<h", byte_rep)[0]))/100)
		self.dict[self.items[32]] = self.ivlv[5]
		byte_rep = packet[77:79]
		self.ivlv[6] = float((float(struct.unpack("<h", byte_rep)[0]))/100)
		self.dict[self.items[33]] = self.ivlv[6]
		byte_rep = packet[79:81]
		self.ivlv[7] = float((float(struct.unpack("<h", byte_rep)[0]))/100)
		self.dict[self.items[34]] = self.ivlv[7]
		byte_rep = packet[81:83]
		self.evlv[0] = float((float(struct.unpack("<h", byte_rep)[0]))/100)
		self.dict[self.items[35]] = self.evlv[0]
		byte_rep = packet[83:85]
		self.evlv[1] = float((float(struct.unpack("<h", byte_rep)[0]))/100)
		self.dict[self.items[36]] = self.evlv[1]
		byte_rep = packet[85:87]
		self.evlv[2] = float((float(struct.unpack("<h", byte_rep)[0]))/100)
		self.dict[self.items[37]] = self.evlv[2]
		byte_rep = packet[87:89]
		self.evlv[3] = float((float(struct.unpack("<h", byte_rep)[0]))/100)
		self.dict[self.items[38]] = self.evlv[3]
		byte_rep = packet[89:91]
		self.evlv[4] = float((float(struct.unpack("<h", byte_rep)[0]))/100)
		self.dict[self.items[39]] = self.evlv[4]
		byte_rep = packet[91:93]
		self.evlv[5] = float((float(struct.unpack("<h", byte_rep)[0]))/100)
		self.dict[self.items[40]] = self.evlv[5]
		byte_rep = packet[93:95]
		self.evlv[6] = float((float(struct.unpack("<h", byte_rep)[0]))/100)
		self.dict[self.items[41]] = self.evlv[6]
		byte_rep = packet[95:97]
		self.evlv[7] = float((float(struct.unpack("<h", byte_rep)[0]))/100)
		self.dict[self.items[42]] = self.evlv[7]
		byte_rep = packet[97:99]
		self.LOG_TO_AUTO = int((float(struct.unpack("<h", byte_rep)[0]))/1)
		self.dict[self.items[43]] = self.LOG_TO_AUTO
		byte_rep = packet[99:101]
		self.auto_states = int((float(struct.unpack("<H", byte_rep)[0]))/1)
		self.dict[self.items[44]] = self.auto_states
		byte_rep = packet[101:105]
		self.e3v = float((float(struct.unpack("<i", byte_rep)[0]))/100)
		self.dict[self.items[45]] = self.e3v
		byte_rep = packet[105:109]
		self.e5v = float((float(struct.unpack("<i", byte_rep)[0]))/100)
		self.dict[self.items[46]] = self.e5v
		byte_rep = packet[109:111]
		self.BOARD_ID = int((float(struct.unpack("<H", byte_rep)[0]))/1)
		self.dict[self.items[47]] = self.BOARD_ID
		byte_rep = packet[111:113]
		self.last_packet_number = int((float(struct.unpack("<H", byte_rep)[0]))/1)
		self.dict[self.items[48]] = self.last_packet_number
		byte_rep = packet[113:115]
		self.last_command_id = int((float(struct.unpack("<H", byte_rep)[0]))/1)
		self.dict[self.items[49]] = self.last_command_id
		byte_rep = packet[115:117]
		self.imtr[0] = float((float(struct.unpack("<H", byte_rep)[0]))/1000)
		self.dict[self.items[50]] = self.imtr[0]
		byte_rep = packet[117:119]
		self.imtr[1] = float((float(struct.unpack("<H", byte_rep)[0]))/1000)
		self.dict[self.items[51]] = self.imtr[1]
		byte_rep = packet[119:121]
		self.tbrd = float((float(struct.unpack("<H", byte_rep)[0]))/10)
		self.dict[self.items[52]] = self.tbrd
		byte_rep = packet[121:123]
		self.tvlv = float((float(struct.unpack("<H", byte_rep)[0]))/10)
		self.dict[self.items[53]] = self.tvlv
		byte_rep = packet[123:125]
		self.tmtr = float((float(struct.unpack("<H", byte_rep)[0]))/10)
		self.dict[self.items[54]] = self.tmtr
		byte_rep = packet[125:126]
		self.error_code = int((float(struct.unpack("<B", byte_rep)[0]))/1)
		self.dict[self.items[55]] = self.error_code
		self.log_string = str(time.clock())+','+str(self.valve_states)+','+str(self.pressure[0])+','+str(self.pressure[1])+','+str(self.pressure[2])+','+str(self.pressure[3])+','+str(self.pressure[4])+','+str(self.pressure[5])+','+str(self.pressure[6])+','+str(self.pressure[7])+','+str(self.samplerate)+','+str(self.motor_setpoint[0])+','+str(self.motor_setpoint[1])+','+str(self.main_cycle_time)+','+str(self.motor_cycle_time)+','+str(self.adc_cycle_time)+','+str(self.telemetry_cycle_time)+','+str(self.ebatt)+','+str(self.ibus)+','+str(self.telemetry_rate)+','+str(self.motor_control_gain[0])+','+str(self.motor_control_gain[1])+','+str(self.motor_control_gain[2])+','+str(self.motor_position[0])+','+str(self.motor_position[1])+','+str(self.motor_pwm[0])+','+str(self.motor_pwm[1])+','+str(self.STATE)+','+str(self.ivlv[0])+','+str(self.ivlv[1])+','+str(self.ivlv[2])+','+str(self.ivlv[3])+','+str(self.ivlv[4])+','+str(self.ivlv[5])+','+str(self.ivlv[6])+','+str(self.ivlv[7])+','+str(self.evlv[0])+','+str(self.evlv[1])+','+str(self.evlv[2])+','+str(self.evlv[3])+','+str(self.evlv[4])+','+str(self.evlv[5])+','+str(self.evlv[6])+','+str(self.evlv[7])+','+str(self.LOG_TO_AUTO)+','+str(self.auto_states)+','+str(self.e3v)+','+str(self.e5v)+','+str(self.BOARD_ID)+','+str(self.last_packet_number)+','+str(self.last_command_id)+','+str(self.imtr[0])+','+str(self.imtr[1])+','+str(self.tbrd)+','+str(self.tvlv)+','+str(self.tmtr)+','+str(self.error_code)+','